rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if the user owns the resource
    function isResourceOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Function to validate habit data
    function isValidHabit(habitData) {
      return habitData.name is string &&
             habitData.name.size() <= 100 &&
             habitData.name.size() > 0 &&
             habitData.userId is string &&
             habitData.userId == request.auth.uid;
    }
    
    // Habit rules
    match /habits/{habitId} {
      // Only allow read if user is authenticated and owns the habit
      allow read: if isAuthenticated() && isResourceOwner(resource.data.userId);
      
      // Only allow create if user is authenticated, data has userId, and userId matches auth
      allow create: if isAuthenticated() && 
                     isResourceOwner(request.resource.data.userId) && 
                     isValidHabit(request.resource.data);
      
      // Only allow update if user is authenticated and owns the habit
      allow update: if isAuthenticated() && 
                     isResourceOwner(resource.data.userId) &&
                     isResourceOwner(request.resource.data.userId);
      
      // Only allow delete if user is authenticated and owns the habit
      allow delete: if isAuthenticated() && isResourceOwner(resource.data.userId);
    }
    
    // User rules
    match /users/{userId} {
      // Only allow read if user is authenticated and is the user
      allow read: if isAuthenticated() && isResourceOwner(userId);
      
      // Only allow create/update if user is authenticated and is the user
      allow create, update: if isAuthenticated() && isResourceOwner(userId);
      
      // Only allow delete if user is authenticated and is the user
      allow delete: if isAuthenticated() && isResourceOwner(userId);
    }
    
    // Category rules
    match /categories/{categoryId} {
      // Only allow read if user is authenticated and owns the category
      allow read: if isAuthenticated() && isResourceOwner(resource.data.userId);
      
      // Only allow create if user is authenticated and owns the category
      allow create: if isAuthenticated() && isResourceOwner(request.resource.data.userId);
      
      // Only allow update if user is authenticated and owns the category
      allow update: if isAuthenticated() && isResourceOwner(resource.data.userId);
      
      // Only allow delete if user is authenticated and owns the category
      allow delete: if isAuthenticated() && isResourceOwner(resource.data.userId);
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 